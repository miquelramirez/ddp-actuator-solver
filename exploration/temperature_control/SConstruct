# This SConstruct file is automatically moved to the directory where the generated
# instance-specific problem data resides during the process of generating the executable solver.

import os

HOME = os.path.expanduser("~")

# read variables from the cache, a user's custom.py file or command line arguments
vars = Variables(['variables.cache', 'custom.py'], ARGUMENTS)
vars.Add(BoolVariable('debug', 'Whether this is a debug build', 'no'))
vars.Add(BoolVariable('edebug', 'Extreme debug', 'no'))
vars.Add(EnumVariable('default_compiler', 'Preferred compiler', 'g++', allowed_values=('g++', 'clang++')))

env = Environment(variables=vars, ENV=os.environ)
env['CXX'] = os.environ.get('CXX', env['default_compiler'])

env.Append( LINKFLAGS = ['-lstdc++' ] )  # Seems to be necessary to avoid compatibility issues at linking time...

if env['edebug']:
	env.Append( CCFLAGS = ['-g', '-DDEBUG', '-DEDEBUG' ] )
elif env['debug']:
	env.Append( CCFLAGS = ['-g', '-DDEBUG' ] )
else:
	env.Append( CCFLAGS = ['-O3', '-DNDEBUG' ] )


env.ParseConfig( 'pkg-config --cflags --libs {}'.format('eigen3'))

# Header and library directories.
# We include pre-specified '~/local/include' and '~/local/lib' directories in case local versions of some libraries (e.g. Boost) are needed
include_paths = ['.']
isystem_paths = [HOME + '/local/include']
lib_paths = [HOME + '/local/lib']

# Boost Python settings
include_paths.append( '/usr/local/include' )
env.Append( LIBPATH = [ '/usr/local/lib' ] )
env.Append( LIBS = [ '-lqpOASES' ] )

env.Append(CPPPATH = [ os.path.abspath(p) for p in include_paths ])
env.Append(CCFLAGS = ['-isystem' + os.path.abspath(p) for p in isystem_paths])

src_objs =  Glob('*.cxx') + Glob('*.cpp') + Glob('*.c')

env.Program('temp_control', src_objs )
